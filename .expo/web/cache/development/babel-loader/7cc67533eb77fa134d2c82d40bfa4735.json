{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useEffect, useState } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport Title from \"../components/ui/Title\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport Card from \"../components/ui/Card\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n  var _useState = useState(initialGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < userNumber || direction === 'greater' && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!!\", 'You know that this is wrong...', [{\n        text: 'Sorry',\n        style: 'cancel'\n      }]);\n      return;\n    }\n    if (direction === 'lower') {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  }\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    })]\n  });\n}\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useEffect","useState","Ionicons","Title","NumberContainer","PrimaryButton","InstructionText","Card","jsx","_jsx","jsxs","_jsxs","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","_ref","userNumber","onGameOver","initialGuess","_useState","_useState2","_slicedToArray","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","View","styles","screen","children","instructionText","buttonsContainer","buttonContainer","onPress","bind","name","size","color","StyleSheet","create","flex","padding","marginBottom","flexDirection"],"sources":["C:/Users/Ignacio Tapia/Desktop/ReactNativeProjects/starting-project/screens/GameScreen.js"],"sourcesContent":["import { View, StyleSheet, Alert } from 'react-native';\r\nimport { useEffect, useState } from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport Title from '../components/ui/Title';\r\nimport NumberContainer from '../components/game/NumberContainer';\r\nimport PrimaryButton from '../components/ui/PrimaryButton';\r\nimport InstructionText from '../components/ui/InstructionText';\r\nimport Card from '../components/ui/Card';\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nfunction GameScreen({ userNumber, onGameOver }) {\r\n  const initialGuess = generateRandomBetween(1, 100, userNumber);\r\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver();\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  function nextGuessHandler(direction) {\r\n    if (\r\n      (direction === 'lower' && currentGuess < userNumber) ||\r\n      (direction === 'greater' && currentGuess > userNumber)\r\n    ) {\r\n      Alert.alert(\"Don't lie!!\", 'You know that this is wrong...', [\r\n        { text: 'Sorry', style: 'cancel' },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    if (direction === 'lower') {\r\n      maxBoundary = currentGuess;\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n    }\r\n    const newRndNumber = generateRandomBetween(\r\n      minBoundary,\r\n      maxBoundary,\r\n      currentGuess\r\n    );\r\n    setCurrentGuess(newRndNumber);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title>Opponent's Guess</Title>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card>\r\n        <InstructionText style={styles.instructionText}>\r\n          Higher or lower?\r\n        </InstructionText>\r\n        <View style={styles.buttonsContainer}>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, 'lower')}>\r\n              <Ionicons name=\"md-remove\" size={24} color=\"white\" />\r\n            </PrimaryButton>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, 'greater')}>\r\n              <Ionicons name=\"md-remove\" size={24} color=\"white\" />\r\n            </PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n      {/* <View>LOG ROUNDS</View> */}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 24,\r\n  },\r\n  instructionText: {\r\n    marginBottom: 12,\r\n  },\r\n  buttonsContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { useEffect, useState } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport Title from \"../components/ui/Title\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport Card from \"../components/ui/Card\";\nimport GuessLogItem from \"../components/game/GuessLogItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n  var _useState = useState(initialGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  var _useState3 = useState([initialGuess]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    guessRounds = _useState4[0],\n    setGuessRounds = _useState4[1];\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width,\n    height = _useWindowDimensions.height;\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver(guessRounds.length);\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  useEffect(function () {\n    minBoundary = 1;\n    maxBoundary = 100;\n  }, []);\n  function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < userNumber || direction === 'greater' && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!!\", 'You know that this is wrong...', [{\n        text: 'Sorry',\n        style: 'cancel'\n      }]);\n      return;\n    }\n    if (direction === 'lower') {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n    setGuessRounds(function (prevGuessRounds) {\n      return [newRndNumber].concat(_toConsumableArray(prevGuessRounds));\n    });\n  }\n  var guessRoundsListLength = guessRounds.length;\n  var content = _jsxs(_Fragment, {\n    children: [_jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    })]\n  });\n  if (width > 500) {\n    content = _jsxs(_Fragment, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        children: [_jsx(View, {}), _jsx(NumberContainer, {\n          children: currentGuess\n        }), _jsx(View, {})]\n      })]\n    });\n  }\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), content, _jsx(View, {\n      style: styles.listContainer,\n      children: _jsx(FlatList, {\n        data: guessRounds,\n        renderItem: function renderItem(itemData) {\n          return _jsx(GuessLogItem, {\n            roundNumber: guessRoundsListLength - itemData.index,\n            guess: itemData.item,\n            children: itemData.item\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        }\n      })\n    })]\n  });\n}\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24,\n    alignItems: 'center'\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  },\n  listContainer: {\n    flex: 1,\n    padding: 16\n  }\n});","map":{"version":3,"names":["useEffect","useState","Ionicons","Title","NumberContainer","PrimaryButton","InstructionText","Card","GuessLogItem","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","_ref","userNumber","onGameOver","initialGuess","_useState","_useState2","_slicedToArray","currentGuess","setCurrentGuess","_useState3","_useState4","guessRounds","setGuessRounds","_useWindowDimensions","useWindowDimensions","width","height","length","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","prevGuessRounds","concat","_toConsumableArray","guessRoundsListLength","content","children","styles","instructionText","View","buttonsContainer","buttonContainer","onPress","bind","name","size","color","screen","listContainer","FlatList","data","renderItem","itemData","roundNumber","index","guess","item","keyExtractor","StyleSheet","create","flex","padding","alignItems","marginBottom","flexDirection"],"sources":["C:/Users/Ignacio Tapia/Desktop/ReactNativeProjects/starting-project/screens/GameScreen.js"],"sourcesContent":["import {\r\n  View,\r\n  StyleSheet,\r\n  Alert,\r\n  FlatList,\r\n  useWindowDimensions,\r\n} from 'react-native';\r\nimport { useEffect, useState } from 'react';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport Title from '../components/ui/Title';\r\nimport NumberContainer from '../components/game/NumberContainer';\r\nimport PrimaryButton from '../components/ui/PrimaryButton';\r\nimport InstructionText from '../components/ui/InstructionText';\r\nimport Card from '../components/ui/Card';\r\nimport GuessLogItem from '../components/game/GuessLogItem';\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nfunction GameScreen({ userNumber, onGameOver }) {\r\n  const initialGuess = generateRandomBetween(1, 100, userNumber);\r\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\r\n  const [guessRounds, setGuessRounds] = useState([initialGuess]);\r\n  const { width, height } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver(guessRounds.length);\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  useEffect(() => {\r\n    minBoundary = 1;\r\n    maxBoundary = 100;\r\n  }, []);\r\n\r\n  function nextGuessHandler(direction) {\r\n    if (\r\n      (direction === 'lower' && currentGuess < userNumber) ||\r\n      (direction === 'greater' && currentGuess > userNumber)\r\n    ) {\r\n      Alert.alert(\"Don't lie!!\", 'You know that this is wrong...', [\r\n        { text: 'Sorry', style: 'cancel' },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    if (direction === 'lower') {\r\n      maxBoundary = currentGuess;\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n    }\r\n    const newRndNumber = generateRandomBetween(\r\n      minBoundary,\r\n      maxBoundary,\r\n      currentGuess\r\n    );\r\n    setCurrentGuess(newRndNumber);\r\n    setGuessRounds(prevGuessRounds => [newRndNumber, ...prevGuessRounds]);\r\n  }\r\n\r\n  const guessRoundsListLength = guessRounds.length;\r\n\r\n  let content = (\r\n    <>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card>\r\n        <InstructionText style={styles.instructionText}>\r\n          Higher or lower?\r\n        </InstructionText>\r\n        <View style={styles.buttonsContainer}>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, 'lower')}>\r\n              <Ionicons name=\"md-remove\" size={24} color=\"white\" />\r\n            </PrimaryButton>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, 'greater')}>\r\n              <Ionicons name=\"md-add\" size={24} color=\"white\" />\r\n            </PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n    </>\r\n  );\r\n\r\n  if (width > 500) {\r\n    content = (\r\n      <>\r\n        <InstructionText style={styles.instructionText}>\r\n          Higher or lower?\r\n        </InstructionText>\r\n        <View>\r\n          <View></View>\r\n          <NumberContainer>{currentGuess}</NumberContainer>\r\n\r\n          <View></View>\r\n        </View>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title>Opponent's Guess</Title>\r\n      {content}\r\n      <View style={styles.listContainer}>\r\n        {/* {guessRounds.map(guessRound => (\r\n          <Text key={guessRound}>{guessRound}</Text>\r\n        ))} */}\r\n        <FlatList\r\n          data={guessRounds}\r\n          renderItem={itemData => (\r\n            <GuessLogItem\r\n              roundNumber={guessRoundsListLength - itemData.index}\r\n              guess={itemData.item}\r\n            >\r\n              {itemData.item}\r\n            </GuessLogItem>\r\n          )}\r\n          keyExtractor={item => item}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 24,\r\n    alignItems: 'center',\r\n  },\r\n  instructionText: {\r\n    marginBottom: 12,\r\n  },\r\n  buttonsContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n  listContainer: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
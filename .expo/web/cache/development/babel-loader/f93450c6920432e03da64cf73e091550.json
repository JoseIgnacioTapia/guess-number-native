{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Title from \"../components/ui/Title\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n  function resetInputHandler() {\n    setEnteredNumber('');\n  }\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Invalid number', 'Number has to be a number between 1 and 99.', [{\n        text: 'Okay',\n        style: 'destructive',\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    onPickNumber(chosenNumber);\n  }\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess my number\"\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(Text, {\n        children: \"Enter a number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: 'center'\n  },\n  inputContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 36,\n    marginHorizontal: 24,\n    padding: 16,\n    backgroundColor: 'Colors.primary800',\n    borderRadius: 8,\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowRadius: 6,\n    shadowOpacity: 0.25\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useState","TextInput","View","StyleSheet","Alert","Text","PrimaryButton","Colors","Title","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_ref","onPickNumber","_useState","_useState2","_slicedToArray","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","alert","text","style","onPress","styles","rootContainer","children","inputContainer","numberInput","maxLength","keyboardType","autoCapitalize","autoCorrect","onChangeText","value","buttonsContainer","buttonContainer","create","flex","marginTop","alignItems","justifyContent","marginHorizontal","padding","backgroundColor","borderRadius","elevation","shadowColor","shadowOffset","width","height","shadowRadius","shadowOpacity","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection"],"sources":["C:/Users/Ignacio Tapia/Desktop/ReactNativeProjects/starting-project/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, View, StyleSheet, Alert, Text } from 'react-native';\r\n\r\nimport PrimaryButton from '../components/ui/PrimaryButton';\r\nimport Colors from '../constants/colors';\r\nimport Title from '../components/ui/Title';\r\n\r\nfunction StartGameScreen({ onPickNumber }) {\r\n  const [enteredNumber, setEnteredNumber] = useState('');\r\n\r\n  function numberInputHandler(enteredText) {\r\n    setEnteredNumber(enteredText);\r\n  }\r\n\r\n  function resetInputHandler() {\r\n    setEnteredNumber('');\r\n  }\r\n\r\n  function confirmInputHandler() {\r\n    const chosenNumber = parseInt(enteredNumber);\r\n\r\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\r\n      Alert.alert(\r\n        'Invalid number',\r\n        'Number has to be a number between 1 and 99.',\r\n        [{ text: 'Okay', style: 'destructive', onPress: resetInputHandler }]\r\n      );\r\n      return;\r\n    }\r\n\r\n    onPickNumber(chosenNumber);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.rootContainer}>\r\n      <Title>Guess my number</Title>\r\n      <View style={styles.inputContainer}>\r\n        <Text>Enter a number</Text>\r\n        <TextInput\r\n          style={styles.numberInput}\r\n          maxLength={2}\r\n          keyboardType=\"number-pad\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          onChangeText={numberInputHandler}\r\n          value={enteredNumber}\r\n        />\r\n        <View style={styles.buttonsContainer}>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default StartGameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  rootContainer: {\r\n    flex: 1,\r\n    marginTop: 100,\r\n    alignItems: 'center',\r\n  },\r\n  inputContainer: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 36,\r\n    marginHorizontal: 24,\r\n    padding: 16,\r\n    backgroundColor: 'Colors.primary800',\r\n    borderRadius: 8,\r\n    elevation: 4,\r\n    shadowColor: 'black',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowRadius: 6,\r\n    shadowOpacity: 0.25,\r\n  },\r\n  numberInput: {\r\n    height: 50,\r\n    width: 50,\r\n    fontSize: 32,\r\n    borderBottomColor: Colors.accent500,\r\n    borderBottomWidth: 2,\r\n    color: Colors.accent500,\r\n    marginVertical: 8,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  buttonsContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}